pros::Motor Catapult(9);
 pros::Motor Catapult_(-1);
 pros::Motor_Group Cata({Catapult, Catapult_});
 pros::ADIDigitalOut Wings (1, LOW);
 pros::Rotation CataPos(10);
 pros::Controller master(pros::E_CONTROLLER_MASTER);
 pros::IMU IMU(12);
 int AutonTimer();
 int i = 0;
  //Backs the robot into the load zone
  chassis.set_drive_pid(-6, DRIVE_SPEED,true);
  chassis.wait_drive();

  //Turns the robot to shoot the catapult to the red goal
  chassis.set_turn_pid(30, TURN_SPEED);
  chassis.wait_drive();

  //Fire the catapult for 45 seconds
    while (i = true){
      if(CataPos.get_angle() > 30350) {

          //If the curent angle is greater than 30330, we spin the catapult down untill it hits 30330

          Cata.move_voltage(8000); // Spins the motors
          pros::delay(.1); //delay ensures the catapult doesnt break 

          //The goal of our L2 button program is to be able to pull back the catapult to the normal
          //launching position where the match loads can be loaded into the robot. 
      }
      else if(CataPos.get_angle() < 30360){
        pros::delay(.5);
        Cata.move_voltage(9000);
     }
       i = i + 1;

     }


  pros::delay(3000);
  i = false;
  Cata.move_voltage(0);
  chassis.set_drive_pid(2, DRIVE_SPEED);
  chassis.wait_drive();
  pros::delay(500);

  chassis.set_turn_pid(60, TURN_SPEED);
  chassis.wait_drive();

  //move to the middle of the defensive zone
  chassis.set_drive_pid(55, DRIVE_SPEED);
  chassis.wait_drive();

  //turn towards the middle bar
  chassis.set_turn_pid(-5, TURN_SPEED);
  chassis.wait_drive();
  pros::delay(200);

  //Sets the catapult in the lowered position
   if (CataPos.get_angle() > 30350) {
      //If the curent angle is greater than 30330, we spin the catapult down untill it hits 30330

      Cata.move_voltage(8000); // Spins the motors
      pros::delay(0.2); //delay ensures the catapult doesnt break 

      //The goal of our L2 button program is to be able to pull back the catapult to the normal
      //launching position where the match loads can be loaded into the robot. 

    }
    else{ // If nothing is being pressed

      Cata.move_voltage(0); //stop the motors
  
    }

  //Drive until it begins to climb the middle bar


  chassis.set_drive_pid(60, 110);
  chassis.wait_drive();
  
  //Opens the wings
  
  Wings.set_value(true);

  Cata.move_voltage(0);
  

  //Move forward to push the shot triballs into the goal
  chassis.set_drive_pid(40, DRIVE_SPEED);
  chassis.wait_drive();

  //Back up away from the goal
  chassis.set_drive_pid(-24, DRIVE_SPEED);
  chassis.wait_drive();

  //Drive back into the goal to push in any triballs that had been broken
  chassis.set_drive_pid(24, DRIVE_SPEED);
  chassis.wait_drive();

  chassis.set_drive_pid(-16, DRIVE_SPEED);
  chassis.wait_drive();
  













 void cataHoldsDown(){
  if (master.get_digital(pros::E_CONTROLLER_DIGITAL_L2)&& CataPos.get_angle() > 30350) {

    Cata.move_voltage(9000);
        pros::delay(.1);


  }else{
    Cata.move_voltage(0);
    pros::delay(.1);

  }
 }
void cataCyclesNormal(){
  if (master.get_digital(pros::E_CONTROLLER_DIGITAL_L1)){
    Cata.move_voltage(9000);
        pros::delay(.1);

  }else{
    Cata.move_voltage(0);
  }
}
void cataCyclesButtonOn(){
  if (master.get_digital(pros::E_CONTROLLER_DIGITAL_X)){
    i = true;
        pros::delay(1);

  }
}
void cataCyclesButtonOff(){
  if(master.get_digital(pros::E_CONTROLLER_DIGITAL_A)){
    i = false;
    pros::delay(1);

  }
}
void catapultButtons(){
  if (i == true){
    if(CataPos.get_angle() > 30350) {

    //If the curent angle is greater than 30330, we spin the catapult down untill it hits 30330

    Cata.move_voltage(8000); // Spins the motors
    pros::delay(.1); //delay ensures the catapult doesnt break 

    //The goal of our L2 button program is to be able to pull back the catapult to the normal
    //launching position where the match loads can be loaded into the robot. 
    }
else if(CataPos.get_angle() < 30360){
  pros::delay(.5);
  Cata.move_voltage(9000);
  }
  }
}















#include "main.h"
#include <iostream>  // For std::to_string
#include "pros/rtos.hpp"  // For pros::c::task_get_count


// Chassis constructor
Drive chassis (
  // Left Chassis Ports (negative port will reverse it!)
  {-14, -2}

  // Right Chassis Ports (negative port will reverse it!)
  ,{8, 20}

  // IMU Port
  ,12

  // Wheel Diameter (Remember, 4" wheels are actually 4.125!) (or tracking wheel diameter)
  ,2.75

  // Cartridge RPM (or tick per rotation if using tracking wheels)
  ,200

  // External Gear Ratio (MUST BE DECIMAL)
  //    (or gear ratio of tracking wheel)
  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.
  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.
  ,0.6

);
 pros::Motor Catapult(9);
 pros::Motor Catapult_(-1);
 pros::Motor_Group Cata({Catapult, Catapult_});
 pros::Motor_Group CataHoldthird({Catapult, Catapult_});
 pros::Motor_Group CataHoldSecond({Catapult, Catapult_}); 
 pros::Motor_Group CataCycles({Catapult, Catapult_});

 pros::ADIDigitalOut Wings (1, LOW);
 pros::Rotation CataPos(10);
 pros::Controller master(pros::E_CONTROLLER_MASTER);
 bool i = false;

int cataHoldDown = 1;
int cataHoldMiddle = 1;
int cataCycleNormal = 1;
int cataCycleButtonON = 1;
int cataCycleButtonOFF = 1;
int cataButtons = 1;
int driverMain = 1;
//int thewings = 1;
  void cataHoldsDown(){
    while (true){
    if (master.get_digital(pros::E_CONTROLLER_DIGITAL_L2)&& CataPos.get_angle() > 30350) {

      CataHoldthird.move_voltage(9000);
          pros::delay(.1);


    }else{
      CataHoldthird.move_voltage(0);
      pros::delay(.1);

    }
    pros::delay(1);
  }
  }
void cataCyclesNormal(){
  while (true){
  if (master.get_digital(pros::E_CONTROLLER_DIGITAL_L1)){
    CataCycles.move_voltage(9000);
        pros::delay(.1);

  }else{
    CataCycles.move_voltage(0);
  }
  pros::delay(1);
}}
void cataCyclesButtonOn(){
  if (master.get_digital(pros::E_CONTROLLER_DIGITAL_X)){
    i = true;
        pros::delay(1);

  }
  pros::delay(1);
}
void cataCyclesButtonOff(){
  while(true){
  if(master.get_digital(pros::E_CONTROLLER_DIGITAL_A)){
    i = false;
    pros::delay(1);

  }
  pros::delay(1);
}}
void catapultButtons(){
  while(true){
  if (i == true){
    if(CataPos.get_angle() > 30350) {

    //If the curent angle is greater than 30330, we spin the catapult down untill it hits 30330

    Cata.move_voltage(8000); // Spins the motors
    pros::delay(.1); //delay ensures the catapult doesnt break 

    //The goal of our L2 button program is to be able to pull back the catapult to the normal
    //launching position where the match loads can be loaded into the robot. 
    }}
else if(CataPos.get_angle() < 30360){
  pros::delay(.5);
  Cata.move_voltage(9000);
  }
    pros::delay(1);

  }
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
  // Print our branding over your terminal :D
  ez::print_ez_template();
  
  pros::delay(500); // Stop the user from doing anything while legacy ports configure.

  // Configure your chassis controls
  chassis.toggle_modify_curve_with_controller(true); // Enables modifying the controller curve with buttons on the joysticks
  chassis.set_active_brake(0); // Sets the active brake kP. We recommend 0.1.
  chassis.set_curve_default(0, 0); // Defaults for curve. If using tank, only the first parameter is used. (Comment this line out if you have an SD card!)  
  default_constants(); // Set the drive to your own constants from autons.cpp!

  // These are already defaulted to these buttons, but you can change the left/right curve buttons here!
  // chassis.set_left_curve_buttons (pros::E_CONTROLLER_DIGITAL_LEFT, pros::E_CONTROLLER_DIGITAL_RIGHT); // If using tank, only the left side is used. 
  // chassis.set_right_curve_buttons(pros::E_CONTROLLER_DIGITAL_Y,    pros::E_CONTROLLER_DIGITAL_A);

  // Autonomous Selector using LLEMU
  ez::as::auton_selector.add_autons({

    Auton("This is skills auton lmao", skillsAuton),

  });
    pros::Task CyclesNormalTask([](void*) { cataCyclesNormal(); }, nullptr, TASK_PRIORITY_DEFAULT, TASK_STACK_DEPTH_DEFAULT, "CyclesNormal");
  CyclesNormalTask.resume();

  pros::Task HoldsDownTask([](void*) { cataHoldsDown(); }, nullptr, TASK_PRIORITY_DEFAULT, TASK_STACK_DEPTH_DEFAULT, "HoldsDown");
  HoldsDownTask.resume();

  pros::Task cButtonsTask([](void*) { catapultButtons(); }, nullptr, TASK_PRIORITY_DEFAULT, TASK_STACK_DEPTH_DEFAULT, "cButtons");
  cButtonsTask.resume();
  
  pros::Task CyclesButtonOnTask([](void*) { cataCyclesButtonOn(); }, nullptr, TASK_PRIORITY_DEFAULT, TASK_STACK_DEPTH_DEFAULT, "CyclesButtonOn");
  CyclesButtonOnTask.resume();

  pros::Task CyclesButtonOffTask([](void*) { cataCyclesButtonOff(); }, nullptr, TASK_PRIORITY_DEFAULT, TASK_STACK_DEPTH_DEFAULT, "CyclesButtonOff");
  CyclesButtonOffTask.resume();



  // Initialize chassis and auton selector
  chassis.initialize();
  ez::as::initialize();
}



/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {
  // . . .
}



/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {
  // . . .
}



/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {
  chassis.reset_pid_targets(); // Resets PID targets to 0
  chassis.reset_gyro(); // Reset gyro position to 0
  chassis.reset_drive_sensor(); // Reset drive sensors to 0
  chassis.set_drive_brake(MOTOR_BRAKE_HOLD); // Set motors to hold.  This helps autonomous consistency.

  ez::as::auton_selector.call_selected_auton(); // Calls selected auton from autonomous selector.
}



/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 
 pros::Motor Catapult(9);
 pros::Motor Catapult_(-1);
 pros::Motor_Group Cata({Catapult, Catapult_});
 pros::ADIDigitalOut Wings (1, LOW);
 pros::Rotation CataPos(10);
 pros::Controller master(pros::E_CONTROLLER_MASTER);
 bool i = false;*



 void thewings(){
  while(true){
  Wings.set_value(LOW);
  while(true){
    if(master.get_digital(pros::E_CONTROLLER_DIGITAL_R2)){
      Wings.set_value(HIGH);
    }else if (master.get_digital(pros::E_CONTROLLER_DIGITAL_R1)){
      Wings.set_value(LOW);
    }
  }
  }
}//*/
void diverControl(){

  chassis.set_drive_brake(MOTOR_BRAKE_COAST);
    
  //pros::Task wing(thewings);

  while (true){
      chassis.tank();//testing
  }

  // Skills auton selecter 

  if(master.get_digital(pros::E_CONTROLLER_DIGITAL_UP) ){
   master.print(1, 1, "Number of tasks: %s", std::to_string(pros::c::task_get_count()).c_str());

    //master.print(1, 1, "Starting skillsAuton");
   // skillsAuton();

    /** While practicing and testing, it can be easier to
     * have a button to exicute the auton programs. This
     * saves us time and makes the testing prosses more 
     * simplistic. Here we program the UP key on the 
     * controller to print "staring skills auton" and
     * it will start the skills Auton
    */

  }

  if(master.get_digital(pros::E_CONTROLLER_DIGITAL_LEFT)){
    master.print(1,1, "Starting Offensive Auton %d");
    offensiveAuton();
  }

  if(master.get_digital(pros::E_CONTROLLER_DIGITAL_RIGHT)){
    master.print(1,1, "Starting Defensive Auton %d");
    defensiveAuton();
  }
  
 
  }
  

void opcontrol() {
  // This is preference to what you like to drive on.
  chassis.set_drive_brake(MOTOR_BRAKE_COAST);

  while (true) {

    chassis.tank(); // Tank control
    // chassis.arcade_standard(ez::SPLIT); // Standard split arcade
    // chassis.arcade_standard(ez::SINGLE); // Standard single arcade
    // chassis.arcade_flipped(ez::SPLIT); // Flipped split arcade
    // chassis.arcade_flipped(ez::SINGLE); // Flipped single arcade

    // . . .
    // Put more user control code here!
    // . . .
    diverControl();
    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME
  }
}

